// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/trip.proto

package trip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TripService_CalculateTripById_FullMethodName   = "/rideshare.TripService/CalculateTripById"
	TripService_CalculateNewTrip_FullMethodName    = "/rideshare.TripService/CalculateNewTrip"
	TripService_GetTimeInNYC_FullMethodName        = "/rideshare.TripService/GetTimeInNYC"
	TripService_CreateTripRequest_FullMethodName   = "/rideshare.TripService/CreateTripRequest"
	TripService_GetTripsByProximity_FullMethodName = "/rideshare.TripService/GetTripsByProximity"
)

// TripServiceClient is the client API for TripService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TripServiceClient interface {
	CalculateTripById(ctx context.Context, in *TripRequest, opts ...grpc.CallOption) (*TripResponse, error)
	CalculateNewTrip(ctx context.Context, in *TripRequest, opts ...grpc.CallOption) (*TripResponse, error)
	GetTimeInNYC(ctx context.Context, in *NoInput, opts ...grpc.CallOption) (*StringResponse, error)
	CreateTripRequest(ctx context.Context, in *TripRequest, opts ...grpc.CallOption) (*TripRequest, error)
	GetTripsByProximity(ctx context.Context, in *GetTripsByProximityRequest, opts ...grpc.CallOption) (*GetTripsByProximityResponse, error)
}

type tripServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTripServiceClient(cc grpc.ClientConnInterface) TripServiceClient {
	return &tripServiceClient{cc}
}

func (c *tripServiceClient) CalculateTripById(ctx context.Context, in *TripRequest, opts ...grpc.CallOption) (*TripResponse, error) {
	out := new(TripResponse)
	err := c.cc.Invoke(ctx, TripService_CalculateTripById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) CalculateNewTrip(ctx context.Context, in *TripRequest, opts ...grpc.CallOption) (*TripResponse, error) {
	out := new(TripResponse)
	err := c.cc.Invoke(ctx, TripService_CalculateNewTrip_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetTimeInNYC(ctx context.Context, in *NoInput, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, TripService_GetTimeInNYC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) CreateTripRequest(ctx context.Context, in *TripRequest, opts ...grpc.CallOption) (*TripRequest, error) {
	out := new(TripRequest)
	err := c.cc.Invoke(ctx, TripService_CreateTripRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tripServiceClient) GetTripsByProximity(ctx context.Context, in *GetTripsByProximityRequest, opts ...grpc.CallOption) (*GetTripsByProximityResponse, error) {
	out := new(GetTripsByProximityResponse)
	err := c.cc.Invoke(ctx, TripService_GetTripsByProximity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TripServiceServer is the server API for TripService service.
// All implementations must embed UnimplementedTripServiceServer
// for forward compatibility
type TripServiceServer interface {
	CalculateTripById(context.Context, *TripRequest) (*TripResponse, error)
	CalculateNewTrip(context.Context, *TripRequest) (*TripResponse, error)
	GetTimeInNYC(context.Context, *NoInput) (*StringResponse, error)
	CreateTripRequest(context.Context, *TripRequest) (*TripRequest, error)
	GetTripsByProximity(context.Context, *GetTripsByProximityRequest) (*GetTripsByProximityResponse, error)
	mustEmbedUnimplementedTripServiceServer()
}

// UnimplementedTripServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTripServiceServer struct {
}

func (UnimplementedTripServiceServer) CalculateTripById(context.Context, *TripRequest) (*TripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateTripById not implemented")
}
func (UnimplementedTripServiceServer) CalculateNewTrip(context.Context, *TripRequest) (*TripResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateNewTrip not implemented")
}
func (UnimplementedTripServiceServer) GetTimeInNYC(context.Context, *NoInput) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeInNYC not implemented")
}
func (UnimplementedTripServiceServer) CreateTripRequest(context.Context, *TripRequest) (*TripRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTripRequest not implemented")
}
func (UnimplementedTripServiceServer) GetTripsByProximity(context.Context, *GetTripsByProximityRequest) (*GetTripsByProximityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTripsByProximity not implemented")
}
func (UnimplementedTripServiceServer) mustEmbedUnimplementedTripServiceServer() {}

// UnsafeTripServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TripServiceServer will
// result in compilation errors.
type UnsafeTripServiceServer interface {
	mustEmbedUnimplementedTripServiceServer()
}

func RegisterTripServiceServer(s grpc.ServiceRegistrar, srv TripServiceServer) {
	s.RegisterService(&TripService_ServiceDesc, srv)
}

func _TripService_CalculateTripById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).CalculateTripById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_CalculateTripById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).CalculateTripById(ctx, req.(*TripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_CalculateNewTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).CalculateNewTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_CalculateNewTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).CalculateNewTrip(ctx, req.(*TripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetTimeInNYC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetTimeInNYC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetTimeInNYC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetTimeInNYC(ctx, req.(*NoInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_CreateTripRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).CreateTripRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_CreateTripRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).CreateTripRequest(ctx, req.(*TripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TripService_GetTripsByProximity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTripsByProximityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripServiceServer).GetTripsByProximity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TripService_GetTripsByProximity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripServiceServer).GetTripsByProximity(ctx, req.(*GetTripsByProximityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TripService_ServiceDesc is the grpc.ServiceDesc for TripService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TripService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rideshare.TripService",
	HandlerType: (*TripServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateTripById",
			Handler:    _TripService_CalculateTripById_Handler,
		},
		{
			MethodName: "CalculateNewTrip",
			Handler:    _TripService_CalculateNewTrip_Handler,
		},
		{
			MethodName: "GetTimeInNYC",
			Handler:    _TripService_GetTimeInNYC_Handler,
		},
		{
			MethodName: "CreateTripRequest",
			Handler:    _TripService_CreateTripRequest_Handler,
		},
		{
			MethodName: "GetTripsByProximity",
			Handler:    _TripService_GetTripsByProximity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/trip.proto",
}
